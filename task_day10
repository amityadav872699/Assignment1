import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CalculatorTest {

    @Test
    public void testAdd() {
        assertEquals(5, Calculator.add(2, 3), "2 + 3 should equal 5");
        assertEquals(0, Calculator.add(-2, 2), "-2 + 2 should equal 0");
        assertEquals(-5, Calculator.add(-3, -2), "-3 + -2 should equal -5");

        assertTrue(Calculator.add(3, 2) > 0, "The result should be positive");
        assertFalse(Calculator.add(-3, 1) > 0, "The result should not be positive");
    }

    @Test
    public void testSub() {
        assertEquals(1, Calculator.sub(3, 2), "3 - 2 should equal 1");
        assertEquals(-4, Calculator.sub(-2, 2), "-2 - 2 should equal -4");
        assertEquals(0, Calculator.sub(2, 2), "2 - 2 should equal 0");

        assertTrue(Calculator.sub(5, 3) > 0, "The result should be positive");
        assertFalse(Calculator.sub(2, 5) > 0, "The result should not be positive");
    }

    @Test
    public void testMul() {
        assertEquals(6, Calculator.mul(2, 3), "2 * 3 should equal 6");
        assertEquals(-4, Calculator.mul(-2, 2), "-2 * 2 should equal -4");
        assertEquals(0, Calculator.mul(0, 5), "0 * 5 should equal 0");

        assertTrue(Calculator.mul(3, 2) > 0, "The result should be positive");
        assertFalse(Calculator.mul(-3, 2) > 0, "The result should not be positive");
    }

    @Test
    public void testDiv() {
        assertEquals(2, Calculator.div(6, 3), "6 / 3 should equal 2");
        assertEquals(-3, Calculator.div(-6, 2), "-6 / 2 should equal -3");

        assertTrue(Calculator.div(10, 2) > 0, "The result should be positive");
        assertFalse(Calculator.div(-10, 2) > 0, "The result should not be positive");

        // Check exception for division by zero
        assertThrows(IllegalArgumentException.class, () -> Calculator.div(1, 0), "Division by zero should throw an exception");
    }
}
