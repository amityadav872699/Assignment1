import org.snmp4j.*;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.*;
import org.snmp4j.transport.*;
import java.io.IOException;
import java.util.*;

public class SNMPClient {
    private static final String SNMP_COMMUNITY = "public";
    private static final String SNMP_HOST = "192.168.56.1";
    private static final int SNMP_PORT = 161;
    private static final String OID_SYS_UPTIME = ".1.3.6.1.2.1.1.3.0";
    private static final String OID_CPU_USAGE = ".1.3.6.1.4.1.2021.11.9.0";
    private static final String OID_MEMORY_USAGE = ".1.3.6.1.4.1.2021.4.11.0";

    public static void main(String[] args) {
        try {
            TransportMapping transport = new DefaultUdpTransportMapping();
            Snmp snmp = new Snmp(transport);
            snmp.listen();

            CommunityTarget target = new CommunityTarget();
            target.setCommunity(new OctetString(SNMP_COMMUNITY));
            target.setAddress(new UdpAddress(SNMP_HOST + "/" + SNMP_PORT));
            target.setVersion(SnmpConstants.version2c);
            target.setTimeout(5000);
            target.setRetries(3);

            Map<String, String> systemData = new HashMap<>();
            systemData.put("System Uptime", getSNMPData(snmp, target, OID_SYS_UPTIME));
            systemData.put("CPU Usage", getSNMPData(snmp, target, OID_CPU_USAGE));
            systemData.put("Memory Usage", getSNMPData(snmp, target, OID_MEMORY_USAGE));

            System.out.println("SNMP Device System Information:");
            System.out.println("--------------------------------");
            systemData.forEach((key, value) -> System.out.println(key + ": " + value));

            snmp.close();
        } catch (IOException e) {
            System.out.println("Error occurred: " + e.getMessage());
        }
    }

    private static String getSNMPData(Snmp snmp, CommunityTarget target, String oid) {
        try {
            PDU pdu = new PDU();
            pdu.add(new VariableBinding(new OID(oid)));
            pdu.setType(PDU.GET);

            ResponseEvent responseEvent = snmp.get(pdu, target);

            if (responseEvent != null) {
                PDU responsePDU = responseEvent.getResponse();
                if (responsePDU != null && responsePDU.getErrorStatus() == PDU.noError) {
                    VariableBinding vb = responsePDU.get(0);
                    return vb.getVariable().toString();
                } else {
                    return "Error: " + responsePDU.getErrorStatusText() + ", Error Index: " + responsePDU.getErrorIndex();
                }
            } else {
                return "Error: No response from the SNMP device";
            }
        } catch (Exception e) {
            return "Exception: " + e.getMessage();
        }
    }
}
