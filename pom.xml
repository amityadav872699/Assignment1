1. WiproApplication.java
java
Copy
Edit
package com.example.nms;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class WiproApplication {

    public static void main(String[] args) {
        SpringApplication.run(WiproApplication.class, args);
        System.out.println("Application started successfully!");
    }
}
2. DeviceController.java
java
Copy
Edit
package com.example.nms.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.example.nms.inventory.entity.Device;
import com.example.nms.serviceimpl.InventoryService;

@RestController
@RequestMapping("/api/devices")
public class DeviceController {

    @Autowired
    private InventoryService inventoryService;

    @GetMapping("/get")
    public List<Device> viewAllDevices() {
        return inventoryService.viewAllDevices();
    }

    @PostMapping("/add")
    public Device addDevice(@RequestBody Device device) {
        return inventoryService.addDevice(device);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Device> getDeviceById(@PathVariable long id) {
        return inventoryService.viewDeviceById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> deleteDevice(@PathVariable long id) {
        inventoryService.deleteDevice(id);
        return ResponseEntity.ok("Device deleted successfully");
    }

    @PutMapping("/update/{id}")
    public ResponseEntity<Device> updateDevice(@PathVariable long id, @RequestBody Device updatedDevice) {
        return ResponseEntity.ok(inventoryService.updateDevice(id, updatedDevice));
    }

    @GetMapping("/filter")
    public List<Device> filterDevices(@RequestParam String status) {
        return inventoryService.filterDevices(status);
    }

    @GetMapping("/connected")
    public List<Device> viewAllConnectedDevices() {
        return inventoryService.viewAllConnectedDevices();
    }
}
3. DeviceDiscoveryController.java
java
Copy
Edit
package com.example.nms.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.nms.serviceimpl.DeviceDiscoveryService;

@RestController
public class DeviceDiscoveryController {

    private final DeviceDiscoveryService deviceDiscoveryService;

    public DeviceDiscoveryController(DeviceDiscoveryService deviceDiscoveryService) {
        this.deviceDiscoveryService = deviceDiscoveryService;
    }

    @GetMapping("/discover")
    public String discoverDevice(@RequestParam String ipAddress) {
        deviceDiscoveryService.discoverDevice(ipAddress);
        return "Discovery initiated for IP: " + ipAddress;
    }
}
4. Device.java (Entity Class)
java
Copy
Edit
package com.example.nms.inventory.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "device")
public class Device {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    private String type;
    private String ipAddress;
    private String vendor;
    private String status;

    public Device() {}

    public Device(Long id, String type, String ipAddress, String vendor, String status) {
        this.id = id;
        this.type = type;
        this.ipAddress = ipAddress;
        this.vendor = vendor;
        this.status = status;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getIpAddress() {
        return ipAddress;
    }

    public void setIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
    }

    public String getVendor() {
        return vendor;
    }

    public void setVendor(String vendor) {
        this.vendor = vendor;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }
}
5. DeviceRepository.java
java
Copy
Edit
package com.example.nms.inventory.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.example.nms.inventory.entity.Device;

@Repository
public interface DeviceRepository extends JpaRepository<Device, Long> {}
6. InventoryService.java (Service Interface)
java
Copy
Edit
package com.example.nms.serviceimpl;

import java.util.List;
import java.util.Optional;

import com.example.nms.inventory.entity.Device;

public interface InventoryService {

    Device addDevice(Device device);

    Optional<Device> viewDeviceById(long id);

    List<Device> viewAllDevices();

    List<Device> viewAllConnectedDevices();

    void deleteDevice(Long id);

    Device updateDevice(long id, Device updatedDevice);

    List<Device> filterDevices(String status);
}
7. InventoryServiceImpl.java
java
Copy
Edit
package com.example.nms.serviceimpl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.nms.discovery.SnmpDiscovery;
import com.example.nms.inventory.entity.Device;
import com.example.nms.inventory.repository.DeviceRepository;

@Service
public class InventoryServiceImpl implements InventoryService {

    @Autowired
    private DeviceRepository deviceRepo;

    @Autowired
    private SnmpDiscovery snmpDiscovery;

    @Override
    public Device addDevice(Device device) {
        return deviceRepo.save(device);
    }

    @Override
    public List<Device> viewAllDevices() {
        return deviceRepo.findAll();
    }

    @Override
    public Optional<Device> viewDeviceById(long id) {
        return deviceRepo.findById(id);
    }

    @Override
    public List<Device> viewAllConnectedDevices() {
        List<Device> connectedDevices = snmpDiscovery.getConnectedDevices().stream()
                .map(ip -> deviceRepo.findAll().stream()
                        .filter(device -> ip.equals(device.getIpAddress()))
                        .findFirst().orElse(null))
                .filter(device -> device != null)
                .collect(Collectors.toList());
        return connectedDevices;
    }

    @Override
    public void deleteDevice(Long id) {
        deviceRepo.deleteById(id);
    }

    @Override
    public Device updateDevice(long id, Device updatedDevice) {
        return deviceRepo.findById(id)
                .map(device -> {
                    device.setType(updatedDevice.getType());
                    device.setIpAddress(updatedDevice.getIpAddress());
                    device.setVendor(updatedDevice.getVendor());
                    device.setStatus(updatedDevice.getStatus());
                    return deviceRepo.save(device);
                })
                .orElseThrow(() -> new RuntimeException("Device with ID " + id + " not found"));
    }

    @Override
    public List<Device> filterDevices(String status) {
        return deviceRepo.findAll().stream()
                .filter(device -> status.equalsIgnoreCase(device.getStatus()))
                .collect(Collectors.toList());
    }
}
8. SnmpDiscovery.java
java
Copy
Edit
package com.example.nms.discovery;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Component;

@Component
public class SnmpDiscovery {

    public List<String> getConnectedDevices() {
        // Mock implementation for connected devices
        List<String> devices = new ArrayList<>();
        devices.add("192.168.1.2");
        devices.add("192.168.1.3");
        return devices;
    }
}
