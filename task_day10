import org.snmp4j.*;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.*;
import org.snmp4j.transport.*;
import org.snmp4j.util.TreeUtils;

import java.io.IOException;
import java.util.List;

public class SNMPClientExample {

    private static final String SNMP_COMMUNITY = "public"; // Default SNMP community string
    private static final String SNMP_HOST = "192.168.56.1"; // SNMP device IP
    private static final int SNMP_PORT = 161; // SNMP port (default 161)
    private static final String OID_SYS_DESCR = ".1.3.6.1.2.1.1.1.0"; // Example OID for SNMP GET

    public static void main(String[] args) {
        try {
            // Step 1: Establish SNMP communication
            TransportMapping<UdpAddress> transport = new DefaultUdpTransportMapping();
            Snmp snmp = new Snmp(transport);
            snmp.listen();

            CommunityTarget target = createTarget(SNMP_HOST, SNMP_PORT, SNMP_COMMUNITY);

            // Step 2: Perform SNMP GET request
            System.out.println("Performing SNMP GET Request:");
            String sysDescr = snmpGet(snmp, target, OID_SYS_DESCR);
            System.out.println("System Description: " + sysDescr);

            // Step 3: Perform SNMP WALK request
            System.out.println("\nPerforming SNMP WALK Request:");
            snmpWalk(snmp, target, ".1.3.6.1.2.1.1"); // Example base OID for system group

            // Close the SNMP session
            snmp.close();
        } catch (IOException e) {
            System.out.println("Error occurred: " + e.getMessage());
        }
    }

    private static CommunityTarget createTarget(String host, int port, String community) {
        CommunityTarget target = new CommunityTarget();
        target.setCommunity(new OctetString(community));
        target.setAddress(new UdpAddress(host + "/" + port));
        target.setVersion(SnmpConstants.version2c);
        target.setTimeout(5000); // 5 seconds timeout
        target.setRetries(3); // Retry count
        return target;
    }

    private static String snmpGet(Snmp snmp, CommunityTarget target, String oid) {
        try {
            PDU pdu = new PDU();
            pdu.add(new VariableBinding(new OID(oid)));
            pdu.setType(PDU.GET);

            ResponseEvent responseEvent = snmp.get(pdu, target);
            if (responseEvent != null && responseEvent.getResponse() != null) {
                PDU responsePDU = responseEvent.getResponse();
                if (responsePDU.getErrorStatus() == PDU.noError) {
                    VariableBinding vb = responsePDU.get(0);
                    return vb.getVariable().toString();
                } else {
                    return "Error: " + responsePDU.getErrorStatusText();
                }
            } else {
                return "Error: No response from the SNMP device.";
            }
        } catch (Exception e) {
            return "Exception: " + e.getMessage();
        }
    }

    private static void snmpWalk(Snmp snmp, CommunityTarget target, String baseOid) {
        try {
            TreeUtils treeUtils = new TreeUtils(snmp, new DefaultPDUFactory());
            List<TreeEvent> events = treeUtils.getSubtree(target, new OID(baseOid));

            if (events == null || events.isEmpty()) {
                System.out.println("No results returned for SNMP WALK.");
                return;
            }

            for (TreeEvent event : events) {
                if (event == null || event.getVariableBindings() == null) {
                    continue;
                }
                for (VariableBinding vb : event.getVariableBindings()) {
                    System.out.println(vb.getOid() + " = " + vb.getVariable());
                }
            }
        } catch (Exception e) {
            System.out.println("Error during SNMP WALK: " + e.getMessage());
        }
    }
}
