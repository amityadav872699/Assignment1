import org.snmp4j.*;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.*;
import org.snmp4j.transport.*;

import java.io.IOException;

public class SNMPClientFormatted {

    private static final String SNMP_COMMUNITY = "public"; // Default SNMP community string
    private static final String SNMP_HOST = "192.168.56.1"; // SNMP device IP
    private static final int SNMP_PORT = 161; // SNMP port (default 161)

    // OIDs
    private static final String OID_SYS_UPTIME = ".1.3.6.1.2.1.1.3.0"; // System Uptime OID
    private static final String OID_CPU_USAGE = ".1.3.6.1.4.1.2021.11.9.0"; // Example CPU usage OID
    private static final String OID_MEMORY_USAGE = ".1.3.6.1.4.1.2021.4.11.0"; // Example Memory usage OID

    public static void main(String[] args) {
        try {
            // Establish SNMP communication
            TransportMapping<UdpAddress> transport = new DefaultUdpTransportMapping();
            Snmp snmp = new Snmp(transport);
            snmp.listen();

            // Create SNMP target
            CommunityTarget target = createTarget(SNMP_HOST, SNMP_PORT, SNMP_COMMUNITY);

            // Retrieve and format data
            String systemUptime = formatUptime(snmpGet(snmp, target, OID_SYS_UPTIME));
            String cpuUsage = formatPercentage(snmpGet(snmp, target, OID_CPU_USAGE));
            String memoryUsage = formatPercentage(snmpGet(snmp, target, OID_MEMORY_USAGE));

            // Display formatted output
            System.out.println("SNMP Device System Information:");
            System.out.println("--------------------------------");
            System.out.println("System Uptime: " + systemUptime);
            System.out.println("CPU Usage: " + cpuUsage);
            System.out.println("Memory Usage: " + memoryUsage);

            // Close the SNMP session
            snmp.close();
        } catch (IOException e) {
            System.out.println("Error occurred: " + e.getMessage());
        }
    }

    private static CommunityTarget createTarget(String host, int port, String community) {
        CommunityTarget target = new CommunityTarget();
        target.setCommunity(new OctetString(community));
        target.setAddress(new UdpAddress(host + "/" + port));
        target.setVersion(SnmpConstants.version2c);
        target.setTimeout(5000); // 5 seconds timeout
        target.setRetries(3); // Retry count
        return target;
    }

    private static String snmpGet(Snmp snmp, CommunityTarget target, String oid) {
        try {
            PDU pdu = new PDU();
            pdu.add(new VariableBinding(new OID(oid)));
            pdu.setType(PDU.GET);

            ResponseEvent responseEvent = snmp.get(pdu, target);
            if (responseEvent != null && responseEvent.getResponse() != null) {
                PDU responsePDU = responseEvent.getResponse();
                if (responsePDU.getErrorStatus() == PDU.noError) {
                    VariableBinding vb = responsePDU.get(0);
                    return vb.getVariable().toString();
                } else {
                    return "Error: " + responsePDU.getErrorStatusText();
                }
            } else {
                return "Error: No response from the SNMP device.";
            }
        } catch (Exception e) {
            return "Exception: " + e.getMessage();
        }
    }

    private static String formatUptime(String rawUptime) {
        try {
            long uptimeTicks = Long.parseLong(rawUptime); // Uptime in ticks (1 tick = 1/100 seconds)
            long seconds = uptimeTicks / 100;
            long hours = seconds / 3600;
            long minutes = (seconds % 3600) / 60;
            return hours + " hours " + minutes + " minutes";
        } catch (Exception e) {
            return "Invalid Uptime Data";
        }
    }

    private static String formatPercentage(String rawValue) {
        try {
            // Assume the raw value is already a percentage value for simplicity
            return Integer.parseInt(rawValue) + "%";
        } catch (Exception e) {
            return "Invalid Percentage Data";
        }
    }
}
