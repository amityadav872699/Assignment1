import org.snmp4j.*;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.*;
import org.snmp4j.transport.*;

import java.io.IOException;
import java.util.*;

public class SNMPClient {
    private static final String SNMP_COMMUNITY = "public";
    private static final String SNMP_HOST = "172.20.0.2";
    private static final int SNMP_PORT = 161;

    private static final String OID_SYS_UPTIME = ".1.3.6.1.2.1.1.3.0";
    private static final String OID_CPU_USAGE = ".1.3.6.1.4.1.9.2.1.58.0";
    private static final String OID_MEMORY_USAGE = ".1.3.6.1.4.1.9.9.48.1.1.1.6.1";

    public static void main(String[] args) {
        try {
            TransportMapping<UdpAddress> transport = new DefaultUdpTransportMapping();
            Snmp snmp = new Snmp(transport);
            snmp.listen();

            CommunityTarget target = createTarget(SNMP_HOST, SNMP_PORT, SNMP_COMMUNITY);

            Map<String, String> systemMetrics = getSystemMetrics(snmp, target);
            System.out.println("SNMP Device System Information:");
            System.out.println("--------------------------------");
            systemMetrics.forEach((key, value) -> System.out.println(key + ": " + value));

            System.out.println("\nSNMP WALK Results:");
            System.out.println("------------------");
            List<String> walkResults = walkMetrics(snmp, target, ".1.3.6.1.2.1");
            walkResults.forEach(System.out::println);

            snmp.close();
        } catch (IOException e) {
            System.out.println("Error occurred: " + e.getMessage());
        }
    }

    private static CommunityTarget createTarget(String host, int port, String community) {
        CommunityTarget target = new CommunityTarget();
        target.setCommunity(new OctetString(community));
        target.setAddress(new UdpAddress(host + "/" + port));
        target.setVersion(SnmpConstants.version2c);
        target.setTimeout(5000);
        target.setRetries(3);
        return target;
    }

    private static Map<String, String> getSystemMetrics(Snmp snmp, CommunityTarget target) throws IOException {
        Map<String, String> systemData = new HashMap<>();
        String rawUptime = getSNMPData(snmp, target, OID_SYS_UPTIME);
        String rawCpuUsage = getSNMPData(snmp, target, OID_CPU_USAGE);
        String rawMemoryUsage = getSNMPData(snmp, target, OID_MEMORY_USAGE);

        systemData.put("System Uptime", parseUptime(rawUptime));
        systemData.put("CPU Usage", formatPercentage(rawCpuUsage));
        systemData.put("Memory Usage", formatPercentage(rawMemoryUsage));

        return systemData;
    }

    private static String getSNMPData(Snmp snmp, CommunityTarget target, String oid) {
        try {
            PDU pdu = new PDU();
            pdu.add(new VariableBinding(new OID(oid)));
            pdu.setType(PDU.GET);

            ResponseEvent responseEvent = snmp.get(pdu, target);
            if (responseEvent != null) {
                PDU responsePDU = responseEvent.getResponse();
                if (responsePDU != null && responsePDU.getErrorStatus() == PDU.noError) {
                    VariableBinding vb = responsePDU.get(0);
                    return vb.getVariable().toString();
                } else {
                    return "Error: " + responsePDU.getErrorStatusText();
                }
            } else {
                return "Error: No response from the SNMP device";
            }
        } catch (Exception e) {
            return "Exception: " + e.getMessage();
        }
    }

    private static List<String> walkMetrics(Snmp snmp, CommunityTarget target, String baseOid) throws IOException {
        List<String> results = new ArrayList<>();
        try {
            OID base = new OID(baseOid);
            PDU pdu = new PDU();
            pdu.add(new VariableBinding(base));
            pdu.setType(PDU.GETNEXT);

            boolean finished = false;
            while (!finished) {
                ResponseEvent responseEvent = snmp.getNext(pdu, target);
                if (responseEvent != null) {
                    PDU responsePDU = responseEvent.getResponse();
                    if (responsePDU != null && responsePDU.getErrorStatus() == PDU.noError) {
                        VariableBinding vb = responsePDU.get(0);
                        if (!vb.getOid().startsWith(base)) {
                            finished = true;
                        } else {
                            results.add(vb.getOid() + " = " + vb.getVariable());
                            pdu.setRequestID(new Integer32(0));
                            pdu.set(0, vb);
                        }
                    } else {
                        finished = true;
                    }
                } else {
                    finished = true;
                }
            }
        } catch (Exception e) {
            results.add("Exception: " + e.getMessage());
        }
        return results;
    }

    private static String parseUptime(String rawUptime) {
        try {
            long hundredthsOfSeconds = Long.parseLong(rawUptime);
            long totalSeconds = hundredthsOfSeconds / 100;
            long hours = totalSeconds / 3600;
            long minutes = (totalSeconds % 3600) / 60;
            return hours + " hours " + minutes + " minutes";
        } catch (NumberFormatException e) {
            return "Invalid uptime format";
        }
    }

    private static String formatPercentage(String rawValue) {
        try {
            return rawValue + "%";
        } catch (NumberFormatException e) {
            return "Invalid percentage format";
        }
    }
}
