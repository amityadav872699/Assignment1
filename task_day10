Task 5: Java Networking and Serialization
Develop a basic TCP client and server application where the client sends a serialized object with 2 numbers and operation  to be performed on them to the server, and the server computes the result and sends it back to the client. for eg, we could send  2, 2, "+" which would mean 2 + 2

package httpserver;

import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;

public class HttpServerApp {
    public static void main(String[] args) throws IOException {
        HttpServer server = HttpServer.create(new InetSocketAddress(8000), 0);
        server.createContext("/login", new MyHandler());
        server.setExecutor(null);
        server.start();
        System.out.println("Server is running on http://localhost:8000/login");
    }

    static class MyHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            String response = "Hello, this is a simple HTTP server response!";
            exchange.sendResponseHeaders(200, response.length());
            try (OutputStream os = exchange.getResponseBody()) {
                os.write(response.getBytes());
            }
        }
    }
}


Day 8:
Task 1: Establishing Database Connections
Write a Java program that connects to a SQLite database and prints out the connection object to confirm successful connection.

Task 2: SQL Queries using JDBC
Create a table 'User' with a following schema 'User ID' and 'Password' stored as hash format (note you have research on how to generate hash from a string), accept "User ID" and "Password" as input and check in the table if they match to confirm whether user access is allowed or not.

package com.jdbc.crud;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class UserAuthentication {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/wipro_db", "root", "admin");

            // Create table if it doesn't exist (Good practice)
            String createTableQuery = "CREATE TABLE IF NOT EXISTS User (" +
                    "UserID VARCHAR(255) PRIMARY KEY," +
                    "Password VARCHAR(255)" +
                    ")";
            conn.createStatement().execute(createTableQuery);


            System.out.print("Enter User ID: ");
            String userId = scanner.nextLine();

            System.out.print("Enter Password: ");
            String password = scanner.nextLine();

            String hashedPassword = generateHash(password); // Hash the input password

            // Check if the user exists and the password matches
            String selectQuery = "SELECT * FROM User WHERE UserID = ? AND Password = ?";
            PreparedStatement pstmt = conn.prepareStatement(selectQuery);
            pstmt.setString(1, userId);
            pstmt.setString(2, hashedPassword);

            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                System.out.println("User access granted.");
            } else {
                System.out.println("Invalid User ID or Password.");
            }

            rs.close();
            pstmt.close();
            conn.close();
            scanner.close();

        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    // Method to generate SHA-256 hash of a string
    public static String generateHash(String password) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        byte[] hashBytes = md.digest(password.getBytes());

        // Convert byte array to a hexadecimal string
        StringBuilder sb = new StringBuilder();
        for (byte b : hashBytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }
}


Task3

package com.jdbc.crud;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet; // Import ResultSet
import java.sql.SQLException;
import java.util.Scanner;  // Import Scanner

public class JdbcCrudOperations {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in); // Initialize Scanner

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/wipro_db", "root", "admin");

            System.out.print("Enter Employee ID to search: ");
            int empId = scanner.nextInt(); // Get employee ID from user
            scanner.nextLine(); // Consume newline character left by nextInt()

            String selectQuery = "SELECT * FROM Employees WHERE eid = ?"; // Parameterized query

            PreparedStatement pstmt = conn.prepareStatement(selectQuery);
            pstmt.setInt(1, empId); // Set the parameter value

            ResultSet rs = pstmt.executeQuery(); // Execute the query

            if (rs.next()) { // Check if any rows were returned
                System.out.println("Employee found:");
                System.out.println("ID: " + rs.getInt("eid"));
                System.out.println("Name: " + rs.getString("ename"));
                System.out.println("Salary: " + rs.getDouble("salary"));
                // ... print other columns as needed
            } else {
                System.out.println("Employee not found.");
            }

            rs.close(); // Close ResultSet
            pstmt.close(); // Close PreparedStatement
            conn.close(); // Close Connection
            scanner.close(); // Close Scanner

        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
