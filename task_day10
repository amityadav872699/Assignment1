Here is your updated pom.xml file with the requested dependencies and the necessary OpenDaylight repository configuration. You can copy this and replace your existing pom.xml to execute it as it is.

Updated pom.xml

<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.yang</groupId>
  <artifactId>netconf</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>netconf</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>

    <!-- OpenDaylight NETCONF Dependencies -->
    <dependency>
        <groupId>org.opendaylight.netconf</groupId>
        <artifactId>netconf-client</artifactId>
        <version>8.0.3</version>
    </dependency>

    <dependency>
        <groupId>org.opendaylight.netconf</groupId>
        <artifactId>netconf-api</artifactId>
        <version>8.0.3</version>
    </dependency>

    <dependency>
        <groupId>org.opendaylight.netconf</groupId>
        <artifactId>transport-ssh</artifactId>
        <version>7.0.3</version>
    </dependency>

    <!-- Logging Dependencies -->
    <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-core</artifactId>
        <version>2.17.2</version>
    </dependency>
    
    <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-api</artifactId>
        <version>2.17.2</version>
    </dependency>

    <!-- Java KeyStore Handling -->
    <dependency>
        <groupId>org.bouncycastle</groupId>
        <artifactId>bcpkix-jdk15on</artifactId>
        <version>1.70</version>
    </dependency>

  </dependencies>

  <repositories>
    <repository>
        <id>opendaylight</id>
        <name>OpenDaylight Nexus Repository</name>
        <url>https://nexus.opendaylight.org/content/repositories/public/</url>
    </repository>
  </repositories>

</project>



⸻

Steps to Apply This Update
	1.	Replace your existing pom.xml with this version.
	2.	Open a terminal or command prompt in your project’s root directory.
	3.	Run the following command to update and install dependencies:

mvn clean install


	4.	If you are using an IDE like Eclipse, right-click the project → Maven → Update Project (Alt + F5).

⸻

What This Update Includes
	•	Added OpenDaylight NETCONF dependencies:
	•	netconf-client (8.0.3)
	•	netconf-api (8.0.3)
	•	transport-ssh (7.0.3)
	•	Retained logging dependencies (log4j-core, log4j-api).
	•	Included Java KeyStore handling (bcpkix-jdk15on).
	•	Added OpenDaylight Maven repository to ensure proper resolution of dependencies.

This should now work as expected! Let me know if you need any further modifications.














Project Structure:

NetworkManagementApp
|-- src
|   |-- main
|       |-- java
|           |-- snmp
|               |-- SNMPClient.java
|           |-- netconf
|               |-- NETCONFClient.java
|           |-- restconf
|               |-- RESTCONFClient.java
|           |-- telemetry
|               |-- TelemetryCollector.java
|           |-- app
|               |-- NetworkManagementApp.java
|-- pom.xml

--- Topology ---

Network Topology:

[ SNMP-Enabled Device (192.168.1.1) ]
          |
          |-- SNMPClient

[ NETCONF-Enabled Router (192.168.1.2) ]
          |
          |-- NETCONFClient

[ RESTCONF Server (192.168.1.3) ]
          |
          |-- RESTCONFClient

[ Prometheus PushGateway (localhost:9091) ]
          |
          |-- TelemetryCollector

--- Code Implementation ---
// Pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.network.management</groupId>
    <artifactId>NetworkManagementApp</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>

        <dependency>
             <groupId>com.tail-f</groupId>
             <artifactId>netconf</artifactId>
             <version>2.5.0</version> <!-- Replace with the version you're using -->
        </dependency>

        <!-- SNMP4J Dependency -->
        <dependency>
            <groupId>org.snmp4j</groupId>
            <artifactId>snmp4j</artifactId>
            <version>3.6.4</version>
        </dependency>

        <!-- NETCONF4J Dependency -->
        <dependency>
            <groupId>com.github.netconf4j</groupId>
            <artifactId>netconf4j</artifactId>
            <version>0.7.0</version>
        </dependency>

        <!-- Jackson for JSON Parsing -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.15.2</version>
        </dependency>

        <!-- Java HTTP Client is built into Java 11+, no additional dependency needed -->
        
        <!-- SLF4J for Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.0.9</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>2.0.9</version>
        </dependency>
        
        <!-- JUnit for Testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Compiler Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
                <configuration>
                    <source>11</source>
                    <target>11</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>


// SNMPClient.java
package snmp;

import org.snmp4j.*;
import org.snmp4j.smi.*;
import org.snmp4j.mp.*;
import org.snmp4j.transport.*;

public class SNMPClient {
    private String address;
    private Snmp snmp;

    public SNMPClient(String address) throws Exception {
        this.address = address;
        TransportMapping<UdpAddress> transport = new DefaultUdpTransportMapping();
        this.snmp = new Snmp(transport);
        transport.listen();
    }

    public void getSystemInfo() throws Exception {
        CommunityTarget target = new CommunityTarget();
        target.setCommunity(new OctetString("public"));
        target.setAddress(new UdpAddress(this.address + "/161"));
        target.setRetries(2);
        target.setTimeout(1500);
        target.setVersion(SnmpConstants.version2c);

        String[] oids = {
            "1.3.6.1.2.1.1.3.0", // Uptime
            "1.3.6.1.4.1.2021.11.9.0", // CPU Usage
            "1.3.6.1.4.1.2021.4.6.0" // Memory Usage
        };

        for (String oid : oids) {
            PDU pdu = new PDU();
            pdu.add(new VariableBinding(new OID(oid)));
            pdu.setType(PDU.GET);

            ResponseEvent responseEvent = this.snmp.send(pdu, target);
            PDU response = responseEvent.getResponse();

            if (response != null) {
                System.out.println(response.get(0).getVariable().toString());
            } else {
                System.out.println("Failed to retrieve OID: " + oid);
            }
        }
    }
}

// NETCONFClient.java
package netconf;

import net.juniper.netconf.NetconfSession;

public class NETCONFClient {
    private NetconfSession session;

    public NETCONFClient(String host, String username, String password) throws Exception {
        this.session = new NetconfSession(host, username, password);
    }

    public void configureRouter(String newHostname) throws Exception {
        String getConfig = this.session.getConfig("running");
        System.out.println("Current Hostname: " + getConfig);

        String editConfig = "<config><system><hostname>" + newHostname + "</hostname></system></config>";
        this.session.editConfig(editConfig);

        String verifyConfig = this.session.getConfig("running");
        System.out.println("Updated Hostname: " + verifyConfig);
    }
}

// RESTCONFClient.java
package restconf;

import java.net.http.*;
import java.net.URI;

public class RESTCONFClient {
    private HttpClient client;
    private String baseUri;

    public RESTCONFClient(String baseUri) {
        this.client = HttpClient.newHttpClient();
        this.baseUri = baseUri;
    }

    public void manageVLAN(String vlanId, String action) throws Exception {
        String uri = this.baseUri + "/vlan/" + vlanId;
        HttpRequest request = null;

        switch (action.toUpperCase()) {
            case "ADD":
                request = HttpRequest.newBuilder()
                        .uri(URI.create(uri))
                        .PUT(HttpRequest.BodyPublishers.ofString("{"vlanId": " + vlanId + "}"))
                        .build();
                break;
            case "DELETE":
                request = HttpRequest.newBuilder()
                        .uri(URI.create(uri))
                        .DELETE()
                        .build();
                break;
        }

        HttpResponse<String> response = this.client.send(request, HttpResponse.BodyHandlers.ofString());
        System.out.println("Response: " + response.body());
    }
}

// TelemetryCollector.java
package telemetry;

import java.util.Timer;
import java.util.TimerTask;
import java.net.http.*;
import java.net.URI;

public class TelemetryCollector {
    private Timer timer;

    public TelemetryCollector() {
        this.timer = new Timer();
    }

    public void start() {
        this.timer.schedule(new TimerTask() {
            @Override
            public void run() {
                collectMetrics();
            }
        }, 0, 5000);
    }

    private void collectMetrics() {
        double latency = Math.random() * 100; // Simulated latency
        double bandwidth = Math.random() * 1000; // Simulated bandwidth

        System.out.println("Latency: " + latency + "ms, Bandwidth: " + bandwidth + "Mbps");
        pushMetrics(latency, bandwidth);
    }

    private void pushMetrics(double latency, double bandwidth) {
        try {
            String data = "# HELP network_latency_ms Network latency in milliseconds\n" +
                          "# TYPE network_latency_ms gauge\n" +
                          "network_latency_ms " + latency + "\n" +
                          "# HELP network_bandwidth_mbps Network bandwidth usage in Mbps\n" +
                          "# TYPE network_bandwidth_mbps gauge\n" +
                          "network_bandwidth_mbps " + bandwidth;

            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("http://localhost:9091/metrics/job/network"))
                    .POST(HttpRequest.BodyPublishers.ofString(data))
                    .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            System.out.println("Metrics pushed: " + response.body());
        } catch (Exception e) {
            System.out.println("Failed to push metrics: " + e.getMessage());
        }
    }
}

// NetworkManagementApp.java
package app;

import snmp.SNMPClient;
import netconf.NETCONFClient;
import restconf.RESTCONFClient;
import telemetry.TelemetryCollector;

public class NetworkManagementApp {
    public static void main(String[] args) throws Exception {
        // SNMP Example
        SNMPClient snmpClient = new SNMPClient("192.168.1.1");
        snmpClient.getSystemInfo();

        // NETCONF Example
        NETCONFClient netconfClient = new NETCONFClient("192.168.1.2", "admin", "password");
        netconfClient.configureRouter("NewRouterName");

        // RESTCONF Example
        RESTCONFClient restconfClient = new RESTCONFClient("http://192.168.1.3:8080/restconf");
        restconfClient.manageVLAN("100", "ADD");

        // Prometheus Telemetry Example
        TelemetryCollector telemetry = new TelemetryCollector();
        telemetry.start();
    }
}



//NETCONFClient.java
package netconf;

import net.juniper.netconf.NetconfSession;

public class NETCONFClient {
    private NetconfSession session;

    public NETCONFClient(String host, String username, String password) throws Exception {
        // Initialize NetconfSession with host, port, username, and password
        this.session = new NetconfSession(host, 830, username, password);
    }

    public void configureRouter(String newHostname) throws Exception {
        try {
            // Retrieve current configuration
            String getConfig = this.session.getConfig("running");
            System.out.println("Current Configuration: " + getConfig);

            // Create the edit-config payload
            String editConfig = "<config xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">"
                    + "<system>"
                    + "<hostname>" + newHostname + "</hostname>"
                    + "</system>"
                    + "</config>";
            this.session.editConfig(editConfig);

            // Verify the updated configuration
            String verifyConfig = this.session.getConfig("running");
            System.out.println("Updated Configuration: " + verifyConfig);
        } catch (Exception e) {
            System.out.println("Error configuring router: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

