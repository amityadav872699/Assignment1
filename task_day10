Updated DeviceController.java
java
Copy
Edit
package com.example.nms.controller;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.example.nms.inventory.entity.Device;
import com.example.nms.serviceimpl.InventoryService;

@RestController
@RequestMapping("/api/devices")
public class DeviceController {

    @Autowired
    private InventoryService inventoryService;

    @GetMapping("/get")
    public List<Device> viewAllDevices() {
        return inventoryService.viewAllDevices();
    }

    @PostMapping("/add")
    public Device addDevice(@RequestBody Device device) {
        return inventoryService.addDevice(device);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Device> getDeviceById(@PathVariable long id) {
        return inventoryService.viewDeviceById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PutMapping("/update/{id}")
    public ResponseEntity<Device> updateDevice(@PathVariable long id, @RequestBody Device updatedDevice) {
        return inventoryService.viewDeviceById(id)
                .map(device -> {
                    device.setType(updatedDevice.getType());
                    device.setIpAddress(updatedDevice.getIpAddress());
                    device.setVendor(updatedDevice.getVendor());
                    device.setStatus(updatedDevice.getStatus());
                    return ResponseEntity.ok(inventoryService.addDevice(device));
                })
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> deleteDevice(@PathVariable long id) {
        inventoryService.deleteDevice(id);
        return ResponseEntity.ok("Device deleted successfully");
    }

    @GetMapping("/connected")
    public List<Device> getConnectedDevices() {
        return inventoryService.viewAllConnectedDevices();
    }

    @GetMapping("/filter")
    public List<Device> filterDevices(@RequestParam String status) {
        return inventoryService.viewAllDevices().stream()
                .filter(device -> status.equalsIgnoreCase(device.getStatus()))
                .collect(Collectors.toList());
    }
}
Updated InventoryService Interface
java
Copy
Edit
package com.example.nms.serviceimpl;

import java.util.List;
import java.util.Optional;

import com.example.nms.inventory.entity.Device;

public interface InventoryService {

    Device addDevice(Device device);

    Optional<Device> viewDeviceById(long id);

    List<Device> viewAllDevices();

    List<Device> viewAllConnectedDevices();

    void deleteDevice(Long id); // New method

    List<Device> filterDevices(String status); // Optional for future extensions
}
Updated InventoryServiceImpl.java
java
Copy
Edit
package com.example.nms.serviceimpl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.nms.discovery.SnmpDiscovery;
import com.example.nms.inventory.entity.Device;
import com.example.nms.inventory.repository.DeviceRepository;

@Service
public class InventoryServiceImpl implements InventoryService {

    @Autowired
    private DeviceRepository deviceRepo;

    @Autowired
    private SnmpDiscovery snmpDiscovery;

    @Override
    public Device addDevice(Device device) {
        return deviceRepo.save(device);
    }

    @Override
    public List<Device> viewAllDevices() {
        return deviceRepo.findAll();
    }

    @Override
    public Optional<Device> viewDeviceById(long id) {
        return deviceRepo.findById(id);
    }

    @Override
    public List<Device> viewAllConnectedDevices() {
        List<Device> connectedDevices = new ArrayList<>();
        try {
            List<String> connectedIpAddresses = snmpDiscovery.getConnectedDevices();
            connectedDevices = deviceRepo.findAll().stream()
                    .filter(device -> connectedIpAddresses.contains(device.getIpAddress()))
                    .collect(Collectors.toList());
        } catch (Exception e) {
            e.printStackTrace();
        }
        return connectedDevices;
    }

    @Override
    public void deleteDevice(Long id) {
        deviceRepo.deleteById(id);
    }

    @Override
    public List<Device> filterDevices(String status) {
        return deviceRepo.findAll().stream()
                .filter(device -> status.equalsIgnoreCase(device.getStatus()))
                .collect(Collectors.toList());
    }
}
API Endpoints
Get All Devices
GET /api/devices/get

Get Device by ID
GET /api/devices/{id}

Add a New Device
POST /api/devices/add

Update a Device
PUT /api/devices/update/{id}

Delete a Device
DELETE /api/devices/delete/{id}

Get All Connected Devices
GET /api/devices/connected

Filter Devices by Status
GET /api/devices/filter?status=<status>
